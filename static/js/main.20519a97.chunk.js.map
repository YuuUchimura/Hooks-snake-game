{"version":3,"sources":["components/Navigation.jsx","components/Field.jsx","components/Button.jsx","components/ManipulationPanel.jsx","utils/index.js","App.js","reportWebVitals.js","index.js"],"names":["Navigation","length","difficulty","onChangeDifficulty","upVisibility","downVisibility","className","onClick","Field","fields","map","row","column","Button","status","onStop","onStart","onRestart","ManipulationPanel","onChange","icon","faArrowLeft","faArrowUp","faArrowDown","faArrowRight","getFoodPosition","fieldSize","excludes","x","Math","floor","random","y","some","item","initFields","snake","i","cols","Array","fill","push","food","initialPosition","initialValues","Difficulty","GameStatus","Object","freeze","init","playing","suspended","gameover","Direction","up","right","left","down","DirectionKeyCodeMap","37","38","39","40","OppositeDirection","Delta","timer","undefined","unsubscribe","clearInterval","App","useState","setFields","body","setBody","setStatus","direction","setDirection","setDifficulty","tick","setTick","useEffect","setInterval","handleMoving","onChangeDirection","useCallback","newDirection","handleKeyDown","e","keyCode","document","addEventListener","removeEventListener","position","delta","newPosition","isEatingMyself","newBody","removingTrack","pop","unshift","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.20519a97.chunk.js","sourcesContent":["import React from \"react\";\n\nconst Navigation = ({ length, difficulty = 3, onChangeDifficulty }) => {\n    // upボタンが\"5\"以下の場合表示\"5\"以上の場合非表示\n  const upVisibility = difficulty < 5 ? \"\" : \"is-hidden\";\n//   downボタンが\"1\"以上の場合表示\"1\"以下の場合非表示\n  const downVisibility = difficulty > 1 ? \"\" : \"is-hidden\";\n//   インクリメントする関数（増やす）\n  const onUpDifficulty = () => {\n    onChangeDifficulty(difficulty + 1);\n  };\n//   デクリメントする関数（減らす）\n  const onDownDifficulty = () => {\n    onChangeDifficulty(difficulty - 1);\n  };\n  \n  return (\n    <div className=\"navigation\">\n      <div className=\"navigation-item\">\n        <span className=\"navigation-label\">Length: </span>\n        <div className=\"navigation-item-number-container\">\n          <div className=\"num-board\">{length}</div>\n        </div>\n      </div>\n      <div className=\"navigation-item\">\n        <span className=\"navigation-label\">Difficulty: </span>\n        <div className=\"navigation-item-number-container\">\n          <span className=\"num-board\">{difficulty}</span>\n          <div className=\"difficulty-button-container\">\n            <div\n              className={`difficulty-button difficulty-up ${upVisibility}`}\n              onClick={onUpDifficulty}\n            ></div>\n            <div\n              className={`difficulty-button difficulty-down ${downVisibility}`}\n              onClick={onDownDifficulty}\n            ></div>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default Navigation;\n","import React from \"react\";\n// y＝縦軸\n// ｘ＝横軸\nconst Field = ({ fields }) => {\n  return (\n    <div className=\"field\">\n        {/* 縦横35個の二次元配列ができる */}\n      {fields.map((row) => {\n        return row.map((column) => {\n          return <div className={`dots ${column}`}></div>;\n        });\n      })}\n    </div>\n  );\n};\n\nexport default Field;\n","import React from \"react\";\n\nconst Button = ({ status, onStop, onStart, onRestart }) => {\n  return (\n    <div className=\"button\">\n      {status === \"gameover\" && (\n        <button className=\"btn btn-gameover\" onClick={onRestart}>\n          gameover\n        </button>\n      )}\n      {status === \"init\" && (\n        <button className=\"btn btn-init\" onClick={onStart}>\n          start\n        </button>\n      )}\n      {status === \"suspended\" && (\n        <button className=\"btn btn-suspended\" onClick={onStart}>\n          start\n        </button>\n      )}\n      {status === \"playing\" && (\n        <button className=\"btn btn-playing\" onClick={onStop}>\n          stop\n        </button>\n      )}\n    </div>\n  );\n};\n\nexport default Button;\n","import React from \"react\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport {\n  faArrowLeft,\n  faArrowUp,\n  faArrowDown,\n  faArrowRight,\n} from \"@fortawesome/free-solid-svg-icons\";\n\nconst ManipulationPanel = ({ onChange }) => {\n  const onUp = () => onChange(\"up\");\n  const onRight = () => onChange(\"right\");\n  const onLeft = () => onChange(\"left\");\n  const onDown = () => onChange(\"down\");\n\n  return (\n    <div className=\"manipulation-panel\">\n      <button className=\"manipulation-btn btn btn-left\" onClick={onLeft}>\n        <FontAwesomeIcon icon={faArrowLeft} />\n      </button>\n      <div>\n        <button className=\"manipulation-btn btn btn-up\" onClick={onUp}>\n          <FontAwesomeIcon icon={faArrowUp} />\n        </button>\n        <button className=\"manipulation-btn btn btn-down\" onClick={onDown}>\n          <FontAwesomeIcon icon={faArrowDown} />\n        </button>\n      </div>\n      <button className=\"manipulation-btn btn btn-right\" onClick={onRight}>\n        <FontAwesomeIcon icon={faArrowRight} />\n      </button>\n    </div>\n  );\n};\n\nexport default ManipulationPanel;\n","// 第１引数には35,第２引数除外したい座標が入る\nexport const getFoodPosition = (fieldSize, excludes) => {\n  while (true) {\n    // fieldSize => 35\n    // 1~33のランダムな数字をxに代入　　　// 1~33のランダムな数字をyに代入\n    const x = Math.floor(Math.random() * (fieldSize - 1 - 1)) + 1;\n    const y = Math.floor(Math.random() * (fieldSize - 1 - 1)) + 1;\n\n    // 下で実行している際、第２引数に[snake] が入っているため、itemは[snake]となる\n    // snakeと場所が被ったらtrue被らなければfalse\n    // while文のためfalseになるまで繰り返される（なかなか被ることはないけど。。。）\n    const conflict = excludes.some((item) => item.x === x && item.y === y);\n    // 被らなかった場合下記を実行\n    if (!conflict) {\n      // オブジェクト形式で返す\n      return { x, y };\n    }\n  }\n};\n\nexport const initFields = (fieldSize, snake) => {\n  // fields配列の生成\n  const fields = [];\n  // fieldSizeの数だけ繰り返し処理（35回）\n  for (let i = 0; i < fieldSize; i++) {\n    // fieldSizeという名の配列を生成（中身はからの文字列）\n    // それを定数colsに代入\n    const cols = new Array(fieldSize).fill(\"\");\n    // field配列の中にcols配列をpushする（これで二次元配列になる）\n    fields.push(cols);\n  }\n  // これは初期値 => fields[17][17]となっている。\n  // その中に\"snake\"を入れている\n  fields[snake.y][snake.x] = \"snake\";\n\n  // 定数foodにgetFoodPosition関数を代入\n  // 中身は{x: ??, y: ??}となっている\n  const food = getFoodPosition(fieldSize, [snake]);\n\n  // fields[food.y][food.x]をfoodとする\n  fields[food.y][food.x] = \"food\";\n  // console.log(food)\n  return fields;\n};\n","import React, { useState, useEffect, useCallback } from \"react\";\nimport Navigation from \"./components/Navigation\";\nimport Field from \"./components/Field\";\nimport Button from \"./components/Button\";\nimport ManipulationPanel from \"./components/ManipulationPanel\";\nimport { initFields, getFoodPosition } from \"./utils\";\n\n// 初期値たち\nconst initialPosition = { x: 17, y: 17 };\nconst initialValues = initFields(35, initialPosition);\nconst defaultIntarval = 200;\nconst defaultDifficulty = 3;\n\nconst Difficulty = [1000, 500, 100, 50, 10];\n\nconst GameStatus = Object.freeze({\n  init: \"init\",\n  playing: \"playing\",\n  suspended: \"suspended\",\n  gameover: \"gameover\",\n});\n\nconst Direction = Object.freeze({\n  up: \"up\",\n  right: \"right\",\n  left: \"left\",\n  down: \"down\",\n});\n\nconst DirectionKeyCodeMap = Object.freeze({\n  37: Direction.left,\n  38: Direction.up,\n  39: Direction.right,\n  40: Direction.down,\n});\n\nconst OppositeDirection = Object.freeze({\n  up: \"down\",\n  right: \"left\",\n  left: \"right\",\n  down: \"up\",\n});\n\nconst Delta = Object.freeze({\n  up: { x: 0, y: -1 },\n  right: { x: 1, y: 0 },\n  left: { x: -1, y: 0 },\n  down: { x: 0, y: 1 },\n});\n\nlet timer = undefined;\n\nconst unsubscribe = () => {\n  // undefinedじゃなかったら処理を終了\n  if (!timer) {\n    return;\n  }\n  clearInterval(timer);\n};\n\n// フィールド内に入っているか判定する関数\n// 入っていなければtrue入っていればfalse\nconst isCollision = (fieldSize, position) => {\n  // 入っていない時\n  if (position.y < 0 || position.x < 0) {\n    return true;\n  }\n  // 大きくなりすぎて枠に収まらない\n  if (position.y > fieldSize - 1 || position.x > fieldSize - 1) {\n    return true;\n  }\n\n  return false;\n};\n\nconst isEatingMyself = (fields, position) => {\n  return fields[position.y][position.x] === \"snake\";\n};\n\nfunction App() {\n  const [fields, setFields] = useState(initialValues);\n  const [body, setBody] = useState([]);\n  const [status, setStatus] = useState(GameStatus.init);\n  const [direction, setDirection] = useState(Direction.up);\n  const [difficulty, setDifficulty] = useState(defaultDifficulty);\n  const [tick, setTick] = useState(0);\n\n  // 初回のみレンダリングされる\n  useEffect(() => {\n    // １秒毎に更新される数値が入る\n    setBody([initialPosition]);\n    // テスト用\n    // setBody(new Array(15).fill(\"\").map((_item, index) => ({ x: 17, y: 17 + index })));\n    //ゲームの中の時間を管理する\n    const interval = Difficulty[difficulty - 1]\n    timer = setInterval(() => {\n      // 初期値の秒数ごとに１足される\n      setTick((tick) => tick + 1);\n      // intarval=初期値の秒数\n    }, interval);\n\n    return unsubscribe;\n  }, [difficulty]);\n\n  useEffect(() => {\n    // positionが空じゃないまたはプレイ中じゃない時は実行されない\n    if (body.length === 0 || status !== GameStatus.playing) {\n      return;\n    }\n\n    const canContinue = handleMoving();\n    if (!canContinue) {\n      setStatus(GameStatus.gameover);\n    }\n  }, [tick]);\n\n  // スタートボタンの中身\n  const onStart = () => {\n    setStatus(GameStatus.playing);\n  };\n\n  const onStop = () => {\n    setStatus(GameStatus.suspended);\n  };\n\n  // リスタートボタンの中身（stateをすべて初期値に戻して再実行している）\n  const onReStart = () => {\n    timer = setInterval(() => {\n      setTick((tick) => tick + 1);\n    }, defaultIntarval);\n    setDirection(Direction.up);\n    setStatus(GameStatus.init);\n    setBody([initialPosition]);\n    setFields(initFields(35, initialPosition));\n  };\n\n  // newDirection=押されたボタンの内容（矢印）\n  const onChangeDirection = useCallback(\n    (newDirection) => {\n      // プレイ中でなければ実行されない\n      if (status !== GameStatus.playing) {\n        return;\n      }\n      // 進んでいる方向と逆方向を押しても実行されない\n      if (OppositeDirection[direction] === newDirection) {\n        return;\n      }\n      // それ以外は実行される\n      // ここのsetDirectionはup(初期値)\n      setDirection(newDirection);\n    },\n    // directionとstatusが変更されたときに実行される\n    [direction, status]\n  );\n\n  const onChangeDifficulty = useCallback(\n    (difficulty) => {\n      if (status !== GameStatus.init) {\n        return;\n      }\n      if (difficulty < 1 || difficulty > difficulty.length) {\n        return;\n      }\n      setDifficulty(difficulty);\n    },\n    [status, difficulty]\n  );\n\n  useEffect(() => {\n    // キーを押したときにそのキーコードを取得する関数\n    const handleKeyDown = (e) => {\n      // 変数DirectionKeyCodeMapの中に入っているコードをnewDirectionに代入\n      const newDirection = DirectionKeyCodeMap[e.keyCode];\n      // 変数DirectionKeyCodeMapの中に入っているコード以外を押した場合は何もしない\n      if (!newDirection) {\n        return;\n      }\n\n      onChangeDirection(newDirection);\n    };\n    // キーを押したときにhandleKeyDownが発火\n    document.addEventListener(\"keydown\", handleKeyDown);\n    // キーを押したときに前回発火していたものが消える\n    return () => document.removeEventListener(\"keydown\", handleKeyDown);\n    // onChangeDirectionが変更されるたびに発火\n  }, [onChangeDirection]);\n\n  const handleMoving = () => {\n    // フィールドの新しい座標を取得\n    const { x, y } = body[0];\n    // Delta=押した方向に進む[direction]で方向を指定する。\n    // それを変数delta に代入\n    const delta = Delta[direction];\n    // 押した方向に進んだ時の場所を更新し、newPositionに代入\n    const newPosition = {\n      x: x + delta.x,\n      y: y + delta.y,\n    };\n\n    if (\n      isCollision(fields.length, newPosition) ||\n      isEatingMyself(fields, newPosition)\n    ) {\n      unsubscribe();\n      return false;\n    }\n\n    // 配列を展開\n    // 後述の削除のために展開している\n    const newBody = [...body];\n    // 移動した先が\"food\"でなければ末尾を削除（pop()）\n    if (fields[newPosition.y][newPosition.x] !== \"food\") {\n      // 定数removingTrackに配列の中に入っている末尾を指定\n      const removingTrack = newBody.pop();\n      // 末尾に(\"\")を代入\n      fields[removingTrack.y][removingTrack.x] = \"\";\n    } else {\n      // 定数foodにgetFoodPosition関数を代入\n      // fields.lengthは35\n      // 第２引数は除外したい座標のため、（...newBodyはスネークの体部分newPositionは次に進む部分）\n      const food = getFoodPosition(fields.length, [...newBody, newPosition]);\n      fields[food.y][food.x] = \"food\";\n    }\n    fields[newPosition.y][newPosition.x] = \"snake\";\n    // 移動した先を追加（先頭）\n    newBody.unshift(newPosition);\n\n    setBody(newBody);\n    setFields(fields); // フィールドを更新\n\n    return true;\n  };\n\n  return (\n    <div className=\"App\">\n      <header className=\"header\">\n        <div className=\"title-container\">\n          <h1 className=\"title\">Snake Game</h1>\n        </div>\n        <Navigation\n          length={body.length}\n          difficulty={difficulty}\n          onChangeDifficulty={onChangeDifficulty}\n        />\n      </header>\n      <main className=\"main\">\n        <Field fields={fields} />\n      </main>\n      <footer className=\"footer\">\n        <Button\n          status={status}\n          onStop={onStop}\n          onStart={onStart}\n          onRestart={onReStart}\n        />\n        <ManipulationPanel onChange={onChangeDirection} />\n      </footer>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}